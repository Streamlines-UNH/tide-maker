AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  tide-maker

  SAM Template for tide-maker

Globals:
  Function:
    Timeout: 900
    MemorySize: 512

Resources:

#  Serverless Lambda Layers:
#
#  H5Layer:
#  - Libraries and required dependencies to work with H5 formatted data
#
#  StreamlineCpp:
#  - Contains binaries and all dependent libraries to run Roland's Code
#  - Execute Randomly seeded Jobard-Lefer streamline drawing algorithms
#
#  TippeCanoeLayer:
#  - Compiled binary (lambda executable) of Mapbox/Tippecanoe
#  -Allows conversion of GeoJSON to MBTiles files (SQLite DB of VectorTiles)
  H5Layer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: h5-lib-layer
      ContentUri: 'dependencies/h5_layer'
      RetentionPolicy: Retain
      CompatibleRuntimes:
        - python3.7
  StreamlineCpp:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: streamlines-exec-layer
      ContentUri: 'dependencies/s111_layer'
      RetentionPolicy: Retain
      CompatibleRuntimes:
        - python3.7

  TippeCanoeLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: tippecanoe-exec-layer
      ContentUri: 'dependencies/tippecanoe_layer'
      RetentionPolicy: Retain
      CompatibleRuntimes:
        - python3.7

# Define our API gateway for later reference
  AWSApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: Basic AWS Api Gateway
      StageName: prod
      Cors: "'*'"
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./swagger.yaml


#  Serverless Lambda Function
#
#  Retrieves data from NOAA FTP server and stores.
#  Triggered on CRON schedule, and posts raw data to Bucket1

  h5query:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: h5_query.lambda_handler
      Runtime: python3.7
      Role: 'arn:aws:iam::958555546010:role/lambda-access-role'
      CodeUri: functions/h5_query/
      Description: ''
      Environment:
        Variables:
          TIME_TABLE: !Select [1, !Split ["/", !GetAtt Table1.Arn]]
          DATA_BUCKET: !Select [1, !Split [":::", !GetAtt Bucket1.Arn]]
      Events:
        Schedule1:
          Type: Schedule
          Properties:
            Schedule: cron(0 * ? * * *)



#  Serverless Lambda Function
#
#  Converts GeoJSON to Vector Tiles
#  Retrieve Data from Bucket2 and writes vector tiles to VectorTileBase (DynamoDB)
  json2mvt:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: json2mvt.lambda_handler
      Runtime: python3.7
      Role: 'arn:aws:iam::958555546010:role/lambda-access-role'
      CodeUri: functions/json2mvt/
      Description: ''
      Environment:
        Variables:
          DATA_TABLE: !Ref VectorTileBase
          DATA_BUCKET: !Select [1, !Split [":::", !GetAtt Bucket3.Arn]]
          TIME_TABLE: !Select [1, !Split ["/", !GetAtt Table1.Arn]]
      Layers:
        - !Ref TippeCanoeLayer
      Events:
        BucketEvent2:
          Type: S3
          Properties:
            Bucket:
              Ref: Bucket2
            Events:
              - 's3:ObjectCreated:*'



#  Serverless Lambda Function
#
#  Extracts H5 data from raw NOAA FTP data
#  Triggers/Retrieves data from Bucket1 and posts messages to SNS topic
  h5extract:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: h5_extract.lambda_handler
      Runtime: python3.7
      Role: 'arn:aws:iam::958555546010:role/lambda-access-role'
      CodeUri: functions/h5_extract/
      Description: ''
      Layers: 
        - !Ref H5Layer
      Environment:
        Variables:
          SNS_TOPIC: !Ref SNSTopic1
      Events:
        BucketEvent1:
          Type: S3
          Properties:
            Bucket:
              Ref: Bucket1
            Events:
              - 's3:ObjectCreated:*'

#  Serverless Lambda Function
#
#  Takes in S111 data and generates GeoJSON formatted streamlines
#  Retrieve Data/Trigger via SNS topic message and posts to Bucket2
  streamlinesprocessor:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: s111_manager.lambda_handler
      Runtime: python3.7
      Role: 'arn:aws:iam::958555546010:role/lambda-access-role'
      CodeUri: functions/s111_to_streamlines/
      Description: ''
      Environment:
        Variables:
          DATA_DEST: !Select [1, !Split [":::", !GetAtt Bucket2.Arn]]
      Layers: 
        - !Ref H5Layer
        - !Ref StreamlineCpp
      Events:
        SNS1:
          Type: SNS
          Properties:
            Topic:
              Ref: SNSTopic1


#  Fully defined API & LambdaFunction to allow USERS to retrieve VECTOR TILE (*.pbf)
#  files on request based on a delivered path of /api/{region}/{time}/{z}/{x}/{y}
#
#  CORS not currently enabled, disable browser CORS to use in this iteration.
  tileapifunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: tile_api_function.lambda_handler
      Runtime: python3.7
      Role: 'arn:aws:iam::958555546010:role/lambda-access-role'
      CodeUri: functions/tile_api_function/
      Environment:
        Variables:
          DATA_TABLE: !Ref VectorTileBase
          TIME_TABLE: !Select [1, !Split ["/", !GetAtt Table1.Arn]]
          DATA_BUCKET: !Select [1, !Split [":::", !GetAtt Bucket3.Arn]]
      Description: >
          API-Gateway endpoint for MVT tile layers. A Vector tile client Given this URL
          https://site.com/Prod/api/CBOFS/{z}/{x}/{y}.pbf
          should display the streamline data
          gathered by the Chesapeake Bay Operational Forecast System.
      Events:
        Api1:
          Type: Api
          Properties:
            Path: '/api/{region}/{t}/{z}/{x}/{y}'
            RestApiId: !Ref AWSApiGateway
            Method: GET

  tileapiinfo:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: tile_api_info.lambda_handler
      Runtime: python3.7
      Role: 'arn:aws:iam::958555546010:role/lambda-access-role'
      CodeUri: functions/tile_api_info/
      Description: >
          Static endpoint that outlines the various data sources
          returns JSON array of objects describing each location's min/max zoom levels, location, name and URL
      Events:
        Api1:
          Type: Api
          Properties:
            RestApiId: !Ref AWSApiGateway
            Path: '/api/regions'
            Method: GET


#  h5query -> h5extract
#
#  Interim storage for H5/S111 files to be extracted out into the correct processable
#  data typing.
  Bucket1:
    Type: 'AWS::S3::Bucket'

#  streamlinesprocessor -> JSON2MVT
#
#  Interim Storage for processed streamlines (GeoJSON) output from
#  Roland's compiled binary
  Bucket2:
    Type: 'AWS::S3::Bucket'

#  MVT cache
#
#  DynamoDB functions with a maximum tuple size of 400KB
#  Some (High-Level) vector tiles are larger than this size.
#  This bucket allows for a 'large-format' storage for the larger files.
#    - Slower than DynamoDB
#    - More expensive R/W than serverless DB
#    - Required due to DDB file size restrictions
  Bucket3:
    Type: 'AWS::S3::Bucket'


#  h5query timestamps
#
#  This DB stores truth values for succcesful reads to NOAA FTP Server.
#  It allows us to execute requests and determine which data we have already retrieved.
  Table1:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: dataset
          AttributeType: S
      KeySchema:
        - AttributeName: dataset
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE

#  Vector Tile Table. Stores data in K-V pairs
#  KEY: {Time}-{Location}-{Z}-{X}-{Y}
#  VALUE: Vector Tile representative of that location and time estimate
  VectorTileBase:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "tileKey"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "tileKey"
          KeyType: "HASH"

#  streamlinesprocessor trigger
#
#  This trigger allows streamlines processor to gather all the data it needs from a bucket.
#  It triggers off of an SNS message rather than a file upload!
#  Good reference to understand this process would be event-driven code
  SNSTopic1:
    Type: 'AWS::SNS::Topic'

# CloudWatchAlarms SNS Topic
# Users to message on Alarm's built in CW
#
  AlarmTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: 'jeffjnh@gmail.com'
          Protocol: 'email'
        - Endpoint: 'msh1011@wildcats.unh.edu'
          Protocol: 'email'

# Alarm for Failure on BatchWrite
#
# Triggers AlarmTopic
#   - Emails Jeff, Matt about problem
  WriteFailAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      ActionsEnabled: true
      ComparisonOperator: "GreaterThanThreshold"
      EvaluationPeriods: 1
      MetricName: "SuccessfulRequestLatency"
      Namespace: "AWS/DynamoDB"
      Period: 300
      Statistic: "Average"
      Threshold: 5000.0
      AlarmActions:
        - !Ref AlarmTopic
      Dimensions:
        - Name: 'TableName'
          Value: !Ref VectorTileBase
        - Name: 'Operation'
          Value: 'BatchWriteItem'

Outputs:
  AWSApiGateway:
    Description: 'API Gateway endpoint URL for Staging stage for Hello World function'
    Value: !Sub 'https://${AWSApiGateway}.execute-api.${AWS::Region}.amazonaws.com/'
